一.引入
	目前的7B模型面临着四个主要的问题：
		(1)知识更新太快
		(2)语料知识库太大
		(3)训练成本太高
		(4)语料难以收集
二.RAG简介
	1.定义: RAG是一种结合了检索增强和生成的技术。
		    通俗来讲，我们可以将RAG视作一款搜索引擎，将用户输入的内容作为索引，以外部库中搜得的相关内容结合大语言模型生成相关答案。
	2.特点: 能够很好的解决LLM在处理知识密集型任务时可能遇到的挑战，比如生成幻觉，过时的知识，缺乏透明和可追溯的推理过程。
	3.应用: a.常见的问答系统和文本生成器。
		    b.信息检索。
		    c.图片描述。
	4.RAG的工作原理：
		(1)经典组成：三部分。Indexing(索引),Retrieval(检索),Geueration(生成)
			1)索引：负责将知识源分割成"块"(chunk),编码成向量并存储在数据体中。
			2)检索：负责接收用户的问题，并将其也编码成向量，并在数据库中找到与问题相关的文档块(top-k chunks）
			3)生成：将检索到的内容和原始的问题一起作为提示输入到LLM中去，再生成回答返回给用户。
	5.总结：这三个组成部分同时也是RAG最关键的三个步骤。
三.向量数据库Vector-DB
	什么是向量数据库？
	向量数据库是RAG技术中专门存储在外部数据的地方。
	(1)作用：
		1.数据存储
			将文本和其他数据通过其他1预训练的模型转换成固定长度的向量，使这些向量能很好的去捕捉语义信息。
		2.相似性检索
			向量数据库是实现快速准确回答的基础，能够高效地实现相似性检索，根据用户查询快速找出最相关的向量。通常情况下，我们计算两个东西：
				1). 余弦相似度
				2).点乘
			来判断相似度。
			检索的结果要根据相似度的得分来进行排序，把其中最相关的内容用作后续回答的生成。
		3.向量表示的优化
			在面向大规模的数据时，以及需要更高速的响应时，也需要进行向量数据库的优化。
			其中，最重要的一点就是对向量表示的优化！
			例如: 1)使用更高级的副本编码技术，使用更哈皮的预训练模型等
			      : 2)使用句子嵌入或段落嵌入。
		4.小结：
			对向量表示的优化，将直接影响RAG检索的结构好坏。         
四.RAG的发展进程
	概念最早是由Meta的Lewis等人在2020年提出时间短但发展迅速。在不到四年时间就已经产生了三种RAG范式！
	1.Naive 主要应用在问答系统，信息检索等
	2.Advanced RAG 主要应用在摘要生成，内容推荐
	3.Modular RAG 主要应用在多模态任务，对话系统
五.RAG常见的优化方法
	(1)嵌入式优化
		考虑结合吸收编码器，密集检索器以及多任务的方式来增强嵌入的性能
	(2)索引优化
		通过增强数据粒度，优化索引结构，添加源数据，对齐优化和混合检索等策略，来提升索引质量。

		小结：这两种方都是通过提高向量数据库性能的质量来对RAG进行提升的。                                                                   
	(3)查询优化
		这个优化是专门针对查询过程进行的优化，可通过查询，扩展和转换来使用户的原始问题更清晰，更适合检索任务。例如，我们采用多查询方法，通过大模型生成的提示工程来扩展查询。
	(4)上下文的管理
		通过重排，上下文选择（压缩）来减少检索的冗余信息，并提高大模型的处理效率。例如：使用小一点的1模型来检测和译出不必要的标记，或者训练信息提取器和信息压缩器。
		
		小结： 这两种方法，检索是重中之重！
六.常见的三种检索方法
	(1)迭代检索 在RAG过程中根据检索结果多次迭代检索知识库，为大模型生成提供全面的知识基础。
	(2)递归检索 通过迭代细化查奴来改进搜索结果的深度和相关性，使用了链式处理指导检索过程并根据检索所得细化推理过程。
	(3)自适应检索使用Flane，Self-RAG来使LLM主动决定检索的时间和内容。
	
	注意：因为LLM为RAG的重要组成部分，所以LLM的微调也是优化RAG中的一种常见思路。可以根据场景和数据特征进行定向微调，也可以根据LLM对于检索和生成的参与进行一些有针对性的微调
七.LLM模型常见优化方法的比较
	从两个方面比较：
		1.任务对外部知识的需求
		2.任务对模型适配度的需求
	(1)提示工程 在面对外部知识需求和模型适配度上都是极差的。不能适应新知识同时对于特定任务也很难有专业性的见解。
	(2)微调 微调是对外部数据需求要求不高，但是对于模型需要求适配度很高的场景时的优化手段。
	(3)RAG则刚好与微调相反，适用于模型适配度要求不高的场景，如果都要求比较高，则要将三种方法和在一起。




